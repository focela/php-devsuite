#!/usr/bin/env bash
# Exit script on error
set -o errexit

# Generate a new local CA inside the Nginx container
echo "Generating a new local Certificate Authority (CA)..."
bin/docker-compose exec -T -u root nginx mkcert -install

# Copy the generated CA certificate to the host
CONTAINER_ID=$(bin/docker-compose ps -q nginx | awk '{print $1}')
docker cp "$CONTAINER_ID":/root/.local/share/mkcert/rootCA.pem .

echo "System password required to install the CA certificate on the host..."

# Determine the operating system and install CA accordingly
if [ "$(uname)" == "Darwin" ]; then
  echo "Installing CA certificate on macOS..."

  sudo security add-trusted-cert -d -r trustRoot -k /Library/Keychains/System.keychain rootCA.pem

  # Check if Firefox is installed
  FIREFOX_BIN="/Applications/Firefox.app/Contents/MacOS/firefox-bin"
  if [ -f "$FIREFOX_BIN" ]; then
    echo "Configuring Firefox to trust the CA certificate..."

    # Create Firefox policy for trusting enterprise certificates
    echo "{\"policies\": {\"Certificates\": {\"ImportEnterpriseRoots\": true}}}" | sudo tee policies.json

    # Ensure the distribution directory exists
    FIREFOX_DIST_DIR="/Applications/Firefox.app/Contents/Resources/distribution"
    [ ! -d "$FIREFOX_DIST_DIR" ] && sudo mkdir -p "$FIREFOX_DIST_DIR"

    # Move policy file to Firefox distribution directory
    sudo mv policies.json "$FIREFOX_DIST_DIR/policies.json"

    # Ensure the Mozilla Certificates directory exists
    MOZILLA_CERT_DIR="/Library/Application Support/Mozilla/Certificates"
    [ ! -d "$MOZILLA_CERT_DIR" ] && sudo mkdir -p "$MOZILLA_CERT_DIR"

    # Move the CA certificate to the Mozilla Certificates directory
    sudo mv rootCA.pem "$MOZILLA_CERT_DIR/rootCA.pem"
  else
    sudo rm rootCA.pem
  fi

else
  echo "Installing CA certificate on Linux..."

  # Ensure required package `libnss3-tools` is installed
  REQUIRED_PKG="libnss3-tools"
  if ! dpkg-query -W --showformat='${Status}\n' "$REQUIRED_PKG" | grep -q "install ok installed"; then
    echo "Installing required package: $REQUIRED_PKG..."
    sudo apt-get --yes install "$REQUIRED_PKG"
  fi

  # Define certificate variables
  CERT_FILE="rootCA.pem"
  CERT_NAME="Root CA"

  # Install certificate for legacy cert8 (DBM format)
  echo "Configuring legacy certificate database (cert8.db)..."
  find ~/ -name "cert8.db" -print0 | while IFS= read -r -d '' CERT_DB; do
    CERT_DIR=$(dirname "$CERT_DB")
    certutil -D -n "$CERT_NAME" -i "$CERT_FILE" -d dbm:"$CERT_DIR"
    certutil -A -n "$CERT_NAME" -t "TCu,Cu,Tu" -i "$CERT_FILE" -d dbm:"$CERT_DIR"
  done

  # Install certificate for modern cert9 (SQL format)
  echo "Configuring modern certificate database (cert9.db)..."
  find ~/ -name "cert9.db" -print0 | while IFS= read -r -d '' CERT_DB; do
    CERT_DIR=$(dirname "$CERT_DB")
    certutil -D -n "$CERT_NAME" -i "$CERT_FILE" -d sql:"$CERT_DIR"
    certutil -A -n "$CERT_NAME" -t "TCu,Cu,Tu" -i "$CERT_FILE" -d sql:"$CERT_DIR"
  done

  # Move CA certificate to system-wide directory and update certificates
  sudo mv rootCA.pem /usr/local/share/ca-certificates/rootCA.crt
  sudo update-ca-certificates
fi

echo "SSL CA setup completed successfully."
